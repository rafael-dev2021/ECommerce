// <auto-generated />
using System;
using Infra_Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra_Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Cart.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://i5.walmartimages.com/seo/Straight-Talk-Apple-iPhone-12-64GB-Black-Prepaid-Smartphone-Locked-to-Straight-Talk_66b2853b-6cb5-4f20-b73a-b60b39b6de44.6b3bf83a920058a47342318925f1dc2b.jpeg?odnHeight=640&odnWidth=640&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Smartphones"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://i5.walmartimages.com/seo/Reebok-Women-s-Flight-Jogger-with-Cargo-Pockets_eefde8e0-c787-48fc-962e-2d2d406391a1.70bc369116e0b1954b5eee14c1a67ea7.jpeg?odnHeight=640&odnWidth=640&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Fashion"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://i5.walmartimages.com/seo/Xbox-Series-X-Video-Game-Console-Black_9f8c06f5-7953-426d-9b68-ab914839cef4.5f15be430800ce4d7c3bb5694d4ab798.jpeg?odnHeight=640&odnWidth=640&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Games"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://i5.walmartimages.com/seo/Carote-Nonstick-Pots-and-Pans-Set-10-Pcs-Granite-Stone-Kitchen-Cookware-Sets-White_efe69ee7-6273-4cbe-a436-149b7b1d0d0c.a2320ff6519d540c3df326c48fdef207.png?odnHeight=2000&odnWidth=2000&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://i5.walmartimages.com/seo/Friendship-Bracelet-Making-Kit-Girls-DIY-Craft-Kits-Toys-Cool-Arts-Crafts-Teen-Travel-Activity-Set-Gifts-Age-6-7-8-9-10-11-12-Year-Old_1c074238-f765-4bc9-bcd4-6aec3c63e831.61da6ea6dec87564dbe3452ae6d55039.jpeg?odnHeight=640&odnWidth=640&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://i5.walmartimages.com/seo/Acer-Nitro-31-5-1500R-Curved-Full-HD-1920-x-1080-Gaming-Monitor-Black-ED320QR-S3biipx_026e53ed-7591-4f39-afb1-d5575a7fc06a.fae36db73738179d935b7d5e64a5be51.jpeg?odnHeight=640&odnWidth=640&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://i5.walmartimages.com/seo/Intex-Corner-Sofa_b6271dd9-4704-436a-aa35-36293fa7482c_1.887862bad366185f36f3793d387c450e.jpeg?odnHeight=640&odnWidth=640&odnBg=FFFFFF",
                            IsActive = true,
                            Name = "Furniture"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConfirmedOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DispatchedOrder")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestReceived")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalItemsOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalOrder")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("Domain.Entities.Payments.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardCvv")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardExpirationDate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Card");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Card");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Payments.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Payment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Payment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ImagesUrl")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "The quality of the photos is incredible.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_637616-MLA70484274053_072023-O.webp",
                            ProductId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1947)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Very good purchase, it arrived very quickly and it arrived like a totally new phone, it only has very slight details on the sides.",
                            Image = "https://m.media-amazon.com/images/I/71a4vqXqxbL._SY256.jpg",
                            ProductId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1963)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Good!",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_743184-MLA69501979268_052023-F.webp",
                            ProductId = 1,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1964)
                        },
                        new
                        {
                            Id = 4,
                            Comment = "The best smartphone I've ever used!!! I left an iPhone 14 Pro Max, sold it, bought the S23 Ultra and still had money left. There's no comparison, with 8gb of ram you can use several applications in the background at the same time.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_936910-MLA54765476953_032023-F.webp",
                            ProductId = 2,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1965)
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Excellent, after all it is an Apple product. Worth every penny given ❤.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_960098-MLA73264672831_122023-F.webp",
                            ProductId = 3,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1966)
                        },
                        new
                        {
                            Id = 6,
                            Comment = "The best.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_911842-MLA73095448948_112023-F.webp",
                            ProductId = 4,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1966)
                        },
                        new
                        {
                            Id = 7,
                            Comment = "New original product you can buy without fear!.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_696237-MLA71736945652_092023-F.webp",
                            ProductId = 5,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1967)
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Excellent product, came sealed.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_918056-MLA72166744514_102023-F.webp",
                            ProductId = 5,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1968)
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Perfect product.",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_661229-MLA72108620029_102023-F.webp",
                            ProductId = 6,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1969)
                        },
                        new
                        {
                            Id = 10,
                            Comment = "The best product, very good!",
                            Image = "https://http2.mlstatic.com/D_NQ_NP_2X_942915-MLA54965635426_042023-F.webp",
                            ProductId = 6,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1970)
                        },
                        new
                        {
                            Id = 11,
                            Comment = "Pay attention to size. Nike models are smaller. The ideal is to buy 1 size larger.",
                            Image = "",
                            ProductId = 7,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1971)
                        },
                        new
                        {
                            Id = 12,
                            Comment = "It was small on me. I want to return it. To get my refund.",
                            Image = "",
                            ProductId = 7,
                            Rating = 1,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1972)
                        },
                        new
                        {
                            Id = 14,
                            Comment = "Excellent product.",
                            Image = "",
                            ProductId = 9,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1973)
                        },
                        new
                        {
                            Id = 15,
                            Comment = "I liked the original, it has to be laced but it's perfect.",
                            Image = "",
                            ProductId = 10,
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1974)
                        },
                        new
                        {
                            Id = 16,
                            Comment = "I'm a fan of this sneaker. One of the most beautiful on the foot, in my opinion.",
                            Image = "",
                            ProductId = 10,
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 5, 28, 0, 56, 8, 736, DateTimeKind.Local).AddTicks(1975)
                        });
                });

            modelBuilder.Entity("Infra_Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsSubscribedToNewsletter")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payments.CreditCard", b =>
                {
                    b.HasBaseType("Domain.Entities.Payments.Card");

                    b.HasDiscriminator().HasValue("CreditCard");
                });

            modelBuilder.Entity("Domain.Entities.Payments.DebitCard", b =>
                {
                    b.HasBaseType("Domain.Entities.Payments.Card");

                    b.HasDiscriminator().HasValue("DebitCard");
                });

            modelBuilder.Entity("Domain.Entities.Payments.PaymentMethod", b =>
                {
                    b.HasBaseType("Domain.Entities.Payments.Payment");

                    b.HasDiscriminator().HasValue("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.Shoes.Shoe", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Shoe");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Buoyed to the comfort you've come to trust, the Air Max Excee meets the needs of your 9 to 5 while keeping your outfit on-point with rich textures. These sneakers deliver just what you're looking for—soft cushioning that's easy to style.",
                            ImagesUrl = "[\"https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/24d5a5ec-db76-4512-99a8-36231b9a9b41/streakfly-road-racing-shoes-8rTxtR.png\",\"https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/97fb810e-5803-43f5-98ac-67c8763deb15/streakfly-road-racing-shoes-8rTxtR.png\",\"https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/6d25c69b-b08b-4cc7-b97d-8384e196951f/streakfly-road-racing-shoes-8rTxtR.png\",\"https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/54e264aa-a85f-4152-b409-ed0372924d81/streakfly-road-racing-shoes-8rTxtR.png\"]",
                            Name = "Nike Streak-fly",
                            RowVersion = new byte[0],
                            Stock = 15
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "The Suede hit the scene in 1968 and has been changing the game ever since. It’s been worn by icons of every generation, and it’s stayed classic through it all. Instantly recognizable and constantly reinvented, Suede’s legacy continues to grow and be legitimized by the authentic and expressive individuals that embrace the iconic shoe. Be apart of the history of Suede.",
                            ImagesUrl = "[\"https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_600,h_600/global/374915/01/sv01/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers\",\"https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_600,h_600/global/374915/01/mod02/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers\",\"https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_600,h_600/global/374915/01/mod03/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers\",\"https://images.puma.com/image/upload/f_auto,q_auto,b_rgb:fafafa,w_600,h_600/global/374915/01/bv/fnd/PNA/fmt/png/Suede-Classic-XXI-Sneakers\"]",
                            Name = "Suede Classic XXI Sneakers",
                            RowVersion = new byte[0],
                            Stock = 15
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.T_Shirts.Shirt", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Shirt");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "The Nike Classic Swoosh Future medium support women's workout top offers long-lasting comfort during training with sweat-wicking fabric and a compression fit.",
                            ImagesUrl = "[\"https://imgnike-a.akamaihd.net/768x768/002897ID.jpg\",\"https://imgnike-a.akamaihd.net/768x768/002897IDA1.jpg\",\"https://imgnike-a.akamaihd.net/768x768/002897IDA4.jpg\",\"https://imgnike-a.akamaihd.net/768x768/002897IDA5.jpg\"]",
                            Name = "Top Nike Swoosh Woman",
                            RowVersion = new byte[0],
                            Stock = 5
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Fresh and full of life, this Adi color Firebird track jacket celebrates the power and authenticity of adidas' legendary DNA.",
                            ImagesUrl = "[\"https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/a5757a66a549439cbac6afcd002ca57f_9366/Adicolor_Classics_Firebird_Track_Jacket_Black_IL8764_01_laydown.jpg\",\"https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/3cae025992434e889496afcd002c97ae_9366/Adicolor_Classics_Firebird_Track_Jacket_Black_IL8764_42_detail.jpg\",\"https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/c6f0e6def4bd4eefa0bfafcd002c7094_9366/Adicolor_Classics_Firebird_Track_Jacket_Black_IL8764_21_model.jpg\",\"https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/a915172e29f24ce4b34bafcd002c78dc_9366/Adicolor_Classics_Firebird_Track_Jacket_Black_IL8764_23_hover_model.jpg\"]",
                            Name = "Adi color classics firebird track jacket",
                            RowVersion = new byte[0],
                            Stock = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Games.Game", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Game");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "With this Spider-Man game you will enjoy hours of fun and new challenges that will allow you to improve as a player.",
                            ImagesUrl = "[\"https://http2.mlstatic.com/D_NQ_NP_739971-MLA44963396567_022021-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_717296-MLA44963321732_022021-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_902181-MLA44963396568_022021-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_952087-MLU69953465194_062023-O.webp\"]",
                            Name = "Marvel's Spider-Man: Miles Morales Standard Edition Sony PS5",
                            RowVersion = new byte[0],
                            Stock = 10
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "With this God of War game you will enjoy hours of fun and new challenges that will allow you to improve as a player. You will be able to share each game with people from all over the world as you can connect online.",
                            ImagesUrl = "[\"https://http2.mlstatic.com/D_NQ_NP_834716-MLU72751588558_112023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_924074-MLU69483138400_052023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_662378-MLU69483138404_052023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_852774-MLU69482634062_052023-O.webp\"]",
                            Name = "God of War Ragnarök Standard Edition Sony PS5",
                            RowVersion = new byte[0],
                            Stock = 15
                        });
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Smartphones.Smartphone", b =>
                {
                    b.HasBaseType("Domain.Entities.Product");

                    b.HasDiscriminator().HasValue("Smartphone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Maximum security so that only you can access your team. You can choose between the fingerprint sensor to activate your phone with a tap, or facial recognition that allows you to unlock up to 30% faster.",
                            ImagesUrl = "[\"https://http2.mlstatic.com/D_NQ_NP_856672-MLU70401529412_072023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_945544-MLU70401529414_072023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_808604-MLU70400221716_072023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_827555-MLU70400783806_072023-O.webp\"]",
                            Name = "Samsung Galaxy S23 Ultra 512GB Unlocked - Black",
                            RowVersion = new byte[0],
                            Stock = 20
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Maximum security so that only you can access your team. You can choose between the fingerprint sensor to activate your phone with a tap, or facial recognition that allows you to unlock up to 30% faster.",
                            ImagesUrl = "[\"https://http2.mlstatic.com/D_NQ_NP_683947-MLU73106437489_112023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_690989-MLU72932986551_112023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_612226-MLU72932986555_112023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_683459-MLU72932986549_112023-O.webp\"]",
                            Name = "Samsung Galaxy S23 Ultra 256GB - Violet",
                            RowVersion = new byte[0],
                            Stock = 25
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "FORGED FROM TITANIUM — iPhone 15 Pro features a rugged, lightweight design made from aerospace-grade titanium. On the back, textured matte glass and, on the front, Ceramic Shield, more resistant than any smartphone glass. It's also tough against splashes, water, and dust.",
                            ImagesUrl = "[\"https://http2.mlstatic.com/D_NQ_NP_918178-MLA71783088444_092023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_918178-MLA71783088444_092023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_829742-MLA71783365702_092023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_715495-MLA71783365704_092023-O.webps\"]",
                            Name = "Apple iPhone 15 Pro (512 GB) - Titanium Blue",
                            RowVersion = new byte[0],
                            Stock = 15
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "FORGED FROM TITANIUM — iPhone 15 Pro features a rugged, lightweight design made from aerospace-grade titanium. On the back, textured matte glass and, on the front, Ceramic Shield, more resistant than any smartphone glass. It's also tough against splashes, water, and dust.",
                            ImagesUrl = "[\"https://http2.mlstatic.com/D_NQ_NP_812116-MLA71783168214_092023E-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_812116-MLA71783168214_092023E-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_658271-MLA71782871766_092023-O.webp\",\"https://http2.mlstatic.com/D_NQ_NP_998898-MLA71782901894_092023-O.webp\"]",
                            Name = "Apple iPhone 15 Pro (128 GB) - Titanium White",
                            RowVersion = new byte[0],
                            Stock = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cart.ShoppingCartItem", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("Domain.Entities.Payments.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.OwnsOne("Domain.Entities.Deliveries.DeliveryAddress", "DeliveryAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("Complement")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Domain.Entities.Deliveries.UserDelivery", "UserDelivery", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)");

                            b1.Property<string>("Ssn")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("DeliveryAddress")
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("UserDelivery")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Orders.OrderDetail", b =>
                {
                    b.HasOne("Domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Payments.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.Payments.Payment", b =>
                {
                    b.OwnsOne("Domain.Entities.Payments.ObjectValues.PaymentMethodObjectValue", "PaymentMethodObjectValue", b1 =>
                        {
                            b1.Property<int>("PaymentId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("PaymentDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("PaymentMethod")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Reference")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");

                            b1.OwnsOne("Domain.Entities.Payments.ObjectValues.PaymentStatusObjectValue", "PaymentStatusObjectValue", b2 =>
                                {
                                    b2.Property<int>("PaymentMethodObjectValuePaymentId")
                                        .HasColumnType("int");

                                    b2.Property<string>("PaymentStatus")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PaymentMethodObjectValuePaymentId");

                                    b2.ToTable("Payment");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentMethodObjectValuePaymentId");
                                });

                            b1.Navigation("PaymentStatusObjectValue")
                                .IsRequired();
                        });

                    b.Navigation("PaymentMethodObjectValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.CommonPropertiesObjectValue", "CommonPropertiesObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Age")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("RecommendedUses")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Size")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    Age = "Adult",
                                    Color = "Black",
                                    Gender = "Woman",
                                    RecommendedUses = "Casual",
                                    Size = "S"
                                },
                                new
                                {
                                    Id = 8,
                                    Age = "Adult",
                                    Color = "Black",
                                    Gender = "Woman",
                                    RecommendedUses = "Casual",
                                    Size = "XS"
                                },
                                new
                                {
                                    Id = 9,
                                    Age = "Adult",
                                    Color = "Pink/Gold and Black",
                                    Gender = "Woman",
                                    RecommendedUses = "skateboarding",
                                    Size = "7.5"
                                },
                                new
                                {
                                    Id = 10,
                                    Age = "Adult",
                                    Color = "Black",
                                    Gender = "Man",
                                    RecommendedUses = "skateboarding",
                                    Size = "7.5"
                                },
                                new
                                {
                                    Id = 5,
                                    Age = "",
                                    Color = "",
                                    Gender = "",
                                    RecommendedUses = "",
                                    Size = ""
                                },
                                new
                                {
                                    Id = 6,
                                    Age = "",
                                    Color = "",
                                    Gender = "",
                                    RecommendedUses = "",
                                    Size = ""
                                },
                                new
                                {
                                    Id = 1,
                                    Age = "",
                                    Color = "Phantom Black",
                                    Gender = "",
                                    RecommendedUses = "",
                                    Size = ""
                                },
                                new
                                {
                                    Id = 2,
                                    Age = "",
                                    Color = "Violet",
                                    Gender = "",
                                    RecommendedUses = "",
                                    Size = ""
                                },
                                new
                                {
                                    Id = 3,
                                    Age = "",
                                    Color = "Titanium Blue",
                                    Gender = "",
                                    RecommendedUses = "",
                                    Size = ""
                                },
                                new
                                {
                                    Id = 4,
                                    Age = "",
                                    Color = "Titanium White",
                                    Gender = "",
                                    RecommendedUses = "",
                                    Size = ""
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.DataObjectValue", "DataObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("ReleaseMonth")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)");

                            b1.Property<int>("ReleaseYear")
                                .HasMaxLength(4)
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    ReleaseMonth = "June",
                                    ReleaseYear = 2023
                                },
                                new
                                {
                                    Id = 8,
                                    ReleaseMonth = "March",
                                    ReleaseYear = 2023
                                },
                                new
                                {
                                    Id = 9,
                                    ReleaseMonth = "June",
                                    ReleaseYear = 2023
                                },
                                new
                                {
                                    Id = 10,
                                    ReleaseMonth = "October",
                                    ReleaseYear = 2022
                                },
                                new
                                {
                                    Id = 5,
                                    ReleaseMonth = "June",
                                    ReleaseYear = 2023
                                },
                                new
                                {
                                    Id = 6,
                                    ReleaseMonth = "July",
                                    ReleaseYear = 2022
                                },
                                new
                                {
                                    Id = 1,
                                    ReleaseMonth = "June",
                                    ReleaseYear = 2023
                                },
                                new
                                {
                                    Id = 2,
                                    ReleaseMonth = "August",
                                    ReleaseYear = 2022
                                },
                                new
                                {
                                    Id = 3,
                                    ReleaseMonth = "Februery",
                                    ReleaseYear = 2023
                                },
                                new
                                {
                                    Id = 4,
                                    ReleaseMonth = "March",
                                    ReleaseYear = 2023
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.PriceObjectValue", "PriceObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<decimal>("HistoryPrice")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Price")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    HistoryPrice = 0.0m,
                                    Price = 16.99m
                                },
                                new
                                {
                                    Id = 8,
                                    HistoryPrice = 80.0m,
                                    Price = 64.99m
                                },
                                new
                                {
                                    Id = 9,
                                    HistoryPrice = 95.0m,
                                    Price = 71.99m
                                },
                                new
                                {
                                    Id = 10,
                                    HistoryPrice = 0.0m,
                                    Price = 75.99m
                                },
                                new
                                {
                                    Id = 5,
                                    HistoryPrice = 0.0m,
                                    Price = 30.99m
                                },
                                new
                                {
                                    Id = 6,
                                    HistoryPrice = 0.0m,
                                    Price = 38.99m
                                },
                                new
                                {
                                    Id = 1,
                                    HistoryPrice = 2299.99m,
                                    Price = 2179.99m
                                },
                                new
                                {
                                    Id = 2,
                                    HistoryPrice = 2199.99m,
                                    Price = 1624.99m
                                },
                                new
                                {
                                    Id = 3,
                                    HistoryPrice = 2199.99m,
                                    Price = 2035.99m
                                },
                                new
                                {
                                    Id = 4,
                                    HistoryPrice = 1799.99m,
                                    Price = 1624.99m
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.SpecificationObjectValue", "SpecificationObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Brand")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Line")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Weight")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    Brand = "Nike",
                                    Line = "",
                                    Model = "Nike T-Shirt",
                                    Type = "T-Shirt",
                                    Weight = "200 g"
                                },
                                new
                                {
                                    Id = 8,
                                    Brand = "Adidas",
                                    Line = "",
                                    Model = "JACKET Adidas",
                                    Type = "T-Shirt",
                                    Weight = "350 g"
                                },
                                new
                                {
                                    Id = 9,
                                    Brand = "Nike",
                                    Line = "SB",
                                    Model = "DM3493",
                                    Type = "Shoes",
                                    Weight = "368,5 g"
                                },
                                new
                                {
                                    Id = 10,
                                    Brand = "Puma",
                                    Line = "SB",
                                    Model = "Basketball Classic XXI sneakers",
                                    Type = "Shoes",
                                    Weight = "368,5 g"
                                },
                                new
                                {
                                    Id = 5,
                                    Brand = "Sony",
                                    Line = "PS5",
                                    Model = "Sony",
                                    Type = "Video game",
                                    Weight = "100 g"
                                },
                                new
                                {
                                    Id = 6,
                                    Brand = "Sony",
                                    Line = "PS5",
                                    Model = "Sony",
                                    Type = "Video game",
                                    Weight = "100 g"
                                },
                                new
                                {
                                    Id = 1,
                                    Brand = "Samsung",
                                    Line = "Galaxy S",
                                    Model = "S23 Ultra",
                                    Type = "Smartphone",
                                    Weight = "233 g"
                                },
                                new
                                {
                                    Id = 2,
                                    Brand = "Samsung",
                                    Line = "Galaxy S",
                                    Model = "S23 Ultra",
                                    Type = "Smartphone",
                                    Weight = "235 g"
                                },
                                new
                                {
                                    Id = 3,
                                    Brand = "Apple",
                                    Line = "iPhone",
                                    Model = "iPhone 15 Pro",
                                    Type = "Smartphone",
                                    Weight = "235 g"
                                },
                                new
                                {
                                    Id = 4,
                                    Brand = "Apple",
                                    Line = "iPhone",
                                    Model = "iPhone 15 Pro",
                                    Type = "Smartphone",
                                    Weight = "235 g"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.WarrantyObjectValue", "WarrantyObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("WarrantyInformation")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("WarrantyLength")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    WarrantyInformation = "15-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 8,
                                    WarrantyInformation = "15-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 9,
                                    WarrantyInformation = "45-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 10,
                                    WarrantyInformation = "45-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 5,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 6,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 1,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 2,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 3,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                },
                                new
                                {
                                    Id = 4,
                                    WarrantyInformation = "30-Day Limited Warranty",
                                    WarrantyLength = "1-year warranty"
                                });
                        });

                    b.Navigation("Category");

                    b.Navigation("CommonPropertiesObjectValue");

                    b.Navigation("DataObjectValue");

                    b.Navigation("PriceObjectValue");

                    b.Navigation("SpecificationObjectValue");

                    b.Navigation("WarrantyObjectValue");
                });

            modelBuilder.Entity("Domain.Entities.Reviews.Review", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infra_Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infra_Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infra_Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infra_Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.Shoes.Shoe", b =>
                {
                    b.OwnsOne("Domain.Entities.Products.Fashion.Shoes.ObjectValues.MaterialObjectValue", "MaterialObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("InteriorMaterials")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("MaterialsFromAbroad")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("SoleMaterials")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 9,
                                    InteriorMaterials = "Cotton",
                                    MaterialsFromAbroad = "Leather",
                                    SoleMaterials = "Rubber"
                                },
                                new
                                {
                                    Id = 10,
                                    InteriorMaterials = "Cotton",
                                    MaterialsFromAbroad = "Leather",
                                    SoleMaterials = "Rubber"
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.FlagsObjectValue", "FlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 9,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = true
                                },
                                new
                                {
                                    Id = 10,
                                    IsBestSeller = true,
                                    IsDailyOffer = false,
                                    IsFavorite = true
                                });
                        });

                    b.Navigation("FlagsObjectValue");

                    b.Navigation("MaterialObjectValue");
                });

            modelBuilder.Entity("Domain.Entities.Products.Fashion.T_Shirts.Shirt", b =>
                {
                    b.OwnsOne("Domain.Entities.Products.Fashion.T_Shirts.ObjectValues.MainFeaturesObjectValue", "MainFeaturesObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("FabricDesign")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("TypeOfClothing")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    FabricDesign = "Straight",
                                    TypeOfClothing = "T-shirt"
                                },
                                new
                                {
                                    Id = 8,
                                    FabricDesign = "Straight",
                                    TypeOfClothing = "T-shirt"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Fashion.T_Shirts.ObjectValues.OtherFeaturesObjectValue", "OtherFeaturesObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Composition")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<bool>("ItsSporty")
                                .HasColumnType("bit");

                            b1.Property<string>("MainMaterial")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<int>("UnitsPerKit")
                                .HasColumnType("int");

                            b1.Property<bool>("WithRecycledMaterials")
                                .HasColumnType("bit");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    Composition = "Polyester",
                                    ItsSporty = false,
                                    MainMaterial = "",
                                    UnitsPerKit = 1,
                                    WithRecycledMaterials = false
                                },
                                new
                                {
                                    Id = 8,
                                    Composition = "",
                                    ItsSporty = true,
                                    MainMaterial = "Cotton",
                                    UnitsPerKit = 1,
                                    WithRecycledMaterials = false
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.FlagsObjectValue", "FlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 7,
                                    IsBestSeller = true,
                                    IsDailyOffer = false,
                                    IsFavorite = true
                                },
                                new
                                {
                                    Id = 8,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = false
                                });
                        });

                    b.Navigation("FlagsObjectValue");

                    b.Navigation("MainFeaturesObjectValue");

                    b.Navigation("OtherFeaturesObjectValue");
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Games.Game", b =>
                {
                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.FlagsObjectValue", "FlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 5,
                                    IsBestSeller = true,
                                    IsDailyOffer = false,
                                    IsFavorite = true
                                },
                                new
                                {
                                    Id = 6,
                                    IsBestSeller = true,
                                    IsDailyOffer = false,
                                    IsFavorite = true
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Games.ObjectValues.GeneralFeaturesObjectValue", "GeneralFeaturesObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Collection")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("Developers")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<string>("Edition")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<string>("GameRating")
                                .IsRequired()
                                .HasColumnType("nvarchar(1)");

                            b1.Property<string>("Platform")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("Publishers")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("Saga")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 5,
                                    Collection = "Spider man",
                                    Developers = "Insomniac Games",
                                    Edition = "Standard Edition",
                                    GameRating = "T",
                                    Platform = "PS5",
                                    Publishers = "Sony",
                                    Saga = "30-Day Limited Warranty",
                                    Title = "Marvel's Spider-Man: Miles Morales"
                                },
                                new
                                {
                                    Id = 6,
                                    Collection = "God of War",
                                    Developers = "SIE Santa Monica Studio",
                                    Edition = "Standard Edition",
                                    GameRating = "M",
                                    Platform = "PS5",
                                    Publishers = "Sony",
                                    Saga = "30-Day Limited Warranty",
                                    Title = "God of War Ragnarök"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Games.ObjectValues.MediaSpecificationObjectValue", "MediaSpecificationObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("AudioLanguages")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<int>("FileSize")
                                .HasColumnType("int");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<bool>("IsMultiplayer")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsOffline")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsOnline")
                                .HasColumnType("bit");

                            b1.Property<int>("MaximumNumberOfOfflinePlayers")
                                .HasColumnType("int");

                            b1.Property<int>("MaximumNumberOfOnlinePlayers")
                                .HasColumnType("int");

                            b1.Property<string>("ScreenLanguages")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("SubtitleLanguages")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 5,
                                    AudioLanguages = "English",
                                    FileSize = 60,
                                    Format = "Physical",
                                    IsMultiplayer = false,
                                    IsOffline = true,
                                    IsOnline = false,
                                    MaximumNumberOfOfflinePlayers = 1,
                                    MaximumNumberOfOnlinePlayers = 1,
                                    ScreenLanguages = "English, Portuguese",
                                    SubtitleLanguages = "English, Portuguese"
                                },
                                new
                                {
                                    Id = 6,
                                    AudioLanguages = "English, Spanish, Portuguese",
                                    FileSize = 91,
                                    Format = "Physical",
                                    IsMultiplayer = false,
                                    IsOffline = true,
                                    IsOnline = true,
                                    MaximumNumberOfOfflinePlayers = 1,
                                    MaximumNumberOfOnlinePlayers = 1,
                                    ScreenLanguages = "Spanish, English, Portuguese",
                                    SubtitleLanguages = "Spanish, English, Portuguese"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Games.ObjectValues.RequirementObjectValue", "RequirementObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("MinimumGraphicsProcessorsRequired")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("MinimumOperatingSystemsRequired")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("MinimumProcessorsRequired")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<int>("MinimumRamRequirementInMb")
                                .HasColumnType("int");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 5,
                                    MinimumGraphicsProcessorsRequired = "V",
                                    MinimumOperatingSystemsRequired = "PS5",
                                    MinimumProcessorsRequired = "Ps5",
                                    MinimumRamRequirementInMb = 60
                                },
                                new
                                {
                                    Id = 6,
                                    MinimumGraphicsProcessorsRequired = "V",
                                    MinimumOperatingSystemsRequired = "PS5",
                                    MinimumProcessorsRequired = "Ps5",
                                    MinimumRamRequirementInMb = 60
                                });
                        });

                    b.Navigation("FlagsObjectValue");

                    b.Navigation("GeneralFeaturesObjectValue");

                    b.Navigation("MediaSpecificationObjectValue");

                    b.Navigation("RequirementObjectValue");
                });

            modelBuilder.Entity("Domain.Entities.Products.Technology.Smartphones.Smartphone", b =>
                {
                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.BatteryObjectValue", "BatteryObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("BatteryCapacityMAh")
                                .HasColumnType("int");

                            b1.Property<string>("BatteryType")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<bool>("IsBatteryRemovable")
                                .HasColumnType("bit");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    BatteryCapacityMAh = 5000,
                                    BatteryType = "Li-Ion",
                                    IsBatteryRemovable = false
                                },
                                new
                                {
                                    Id = 2,
                                    BatteryCapacityMAh = 5000,
                                    BatteryType = "Lithium Ion",
                                    IsBatteryRemovable = false
                                },
                                new
                                {
                                    Id = 3,
                                    BatteryCapacityMAh = 5000,
                                    BatteryType = "Lithium Ion",
                                    IsBatteryRemovable = false
                                },
                                new
                                {
                                    Id = 4,
                                    BatteryCapacityMAh = 5000,
                                    BatteryType = "Lithium Ion",
                                    IsBatteryRemovable = false
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.CameraObjectValue", "CameraObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("MainCameraFeature")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("MainCameraSpec")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<string>("SelfieCameraFeature")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("SelfieCameraSpec")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    MainCameraFeature = "(Quad) 200 MP + 10 MP + 10 MP + 12 MP",
                                    MainCameraSpec = "200 Mpx",
                                    SelfieCameraFeature = "LED flash, auto-HDR, panorama",
                                    SelfieCameraSpec = "12 Mpx"
                                },
                                new
                                {
                                    Id = 2,
                                    MainCameraFeature = "200 Mpx/12 Mpx/10 Mpx/10 Mpx",
                                    MainCameraSpec = "200 Mpx",
                                    SelfieCameraFeature = "LED flash, auto-HDR, panorama",
                                    SelfieCameraSpec = "12 Mpx"
                                },
                                new
                                {
                                    Id = 3,
                                    MainCameraFeature = "48 Mpx/12 Mpx/12 Mpx",
                                    MainCameraSpec = "48 Mpx",
                                    SelfieCameraFeature = "Photonic engine, Deep fusion, Smart HDR 4, Portrait mode, Portrait lighting with six effects,",
                                    SelfieCameraSpec = "12 Mpx"
                                },
                                new
                                {
                                    Id = 4,
                                    MainCameraFeature = "48 Mpx/12 Mpx/12 Mpx",
                                    MainCameraSpec = "48 Mpx",
                                    SelfieCameraFeature = "Photonic engine, Deep fusion, Smart HDR 4, Portrait mode, Portrait lighting with six effects,",
                                    SelfieCameraSpec = "12 Mpx"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.DimensionObjectValue", "DimensionObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<double>("HeightInches")
                                .HasColumnType("float");

                            b1.Property<double>("ThicknessInches")
                                .HasColumnType("float");

                            b1.Property<double>("WidthInches")
                                .HasColumnType("float");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    HeightInches = 163.40000000000001,
                                    ThicknessInches = 8.9000000000000004,
                                    WidthInches = 78.099999999999994
                                },
                                new
                                {
                                    Id = 2,
                                    HeightInches = 163.40000000000001,
                                    ThicknessInches = 8.9000000000000004,
                                    WidthInches = 78.099999999999994
                                },
                                new
                                {
                                    Id = 3,
                                    HeightInches = 160.90000000000001,
                                    ThicknessInches = 7.7999999999999998,
                                    WidthInches = 77.799999999999997
                                },
                                new
                                {
                                    Id = 4,
                                    HeightInches = 160.90000000000001,
                                    ThicknessInches = 7.7999999999999998,
                                    WidthInches = 77.799999999999997
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.DisplayObjectValue", "DisplayObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("DisplayProtection")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<string>("DisplayResolution")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)");

                            b1.Property<double>("DisplaySizeInches")
                                .HasColumnType("float");

                            b1.Property<string>("DisplayType")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    DisplayProtection = "Corning Gorilla Glass Victus 2",
                                    DisplayResolution = "1440 px x 3088 px",
                                    DisplaySizeInches = 6.7999999999999998,
                                    DisplayType = "Dynamic AMOLED 2X 120 Hz"
                                },
                                new
                                {
                                    Id = 2,
                                    DisplayProtection = "Corning Gorilla Glass Victus 2",
                                    DisplayResolution = "1440 px x 3088 px",
                                    DisplaySizeInches = 6.7999999999999998,
                                    DisplayType = "Dynamic AMOLED 2X"
                                },
                                new
                                {
                                    Id = 3,
                                    DisplayProtection = "Corning Gorilla Glass Victus 2",
                                    DisplayResolution = "2556 px x 1179 px",
                                    DisplaySizeInches = 6.0999999999999996,
                                    DisplayType = "Super Retina XDR"
                                },
                                new
                                {
                                    Id = 4,
                                    DisplayProtection = "Corning Gorilla Glass Victus 2",
                                    DisplayResolution = "2556 px x 1179 px",
                                    DisplaySizeInches = 6.0999999999999996,
                                    DisplayType = "Super Retina XDR"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.FeatureObjectValue", "FeatureObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("CellNetworkTechnology")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("ManufacturerPartNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("VirtualAssistant")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    CellNetworkTechnology = "WCDMA (UMTS) / GSM / 5G",
                                    ManufacturerPartNumber = "SM-S918UZKFXAA",
                                    VirtualAssistant = "Samsung Bixby,Alexa,Google Assistant"
                                },
                                new
                                {
                                    Id = 2,
                                    CellNetworkTechnology = "WCDMA (UMTS) / GSM / 5G",
                                    ManufacturerPartNumber = "SM-B518UZKFX22",
                                    VirtualAssistant = "Samsung Bixby,Alexa,Google Assistant"
                                },
                                new
                                {
                                    Id = 3,
                                    CellNetworkTechnology = "WCDMA (UMTS) / GSM / 5G",
                                    ManufacturerPartNumber = "AA-12SF7832SD301EW3",
                                    VirtualAssistant = "Apple Watch,HomePod,Siri Assistant"
                                },
                                new
                                {
                                    Id = 4,
                                    CellNetworkTechnology = "WCDMA (UMTS) / GSM / 5G",
                                    ManufacturerPartNumber = "AA-12VD783HR230SW19",
                                    VirtualAssistant = "Apple Watch,HomePod,Siri Assistant"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.PlatformObjectValue", "PlatformObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Chipset")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Cpu")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("Gpu")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("OperatingSystem")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    Chipset = "Qualcomm SM8550-AC Snapdragon 8 Gen 2",
                                    Cpu = "Octa-core",
                                    Gpu = "Adreno 740",
                                    OperatingSystem = "Android"
                                },
                                new
                                {
                                    Id = 2,
                                    Chipset = "Qualcomm SM8550-AC Snapdragon 8 Gen 2",
                                    Cpu = "Octa-Core of up to 3.36GHz",
                                    Gpu = "Adreno 740",
                                    OperatingSystem = "Android"
                                },
                                new
                                {
                                    Id = 3,
                                    Chipset = "Apple A17 Pro",
                                    Cpu = "Chip A16 Bionic",
                                    Gpu = "5 cores",
                                    OperatingSystem = "iOS"
                                },
                                new
                                {
                                    Id = 4,
                                    Chipset = "Apple A17 Pro",
                                    Cpu = "Chip A16 Bionic",
                                    Gpu = "5 cores",
                                    OperatingSystem = "iOS"
                                });
                        });

                    b.OwnsOne("Domain.Entities.Products.Technology.Smartphones.ObjectValues.StorageObjectValue", "StorageObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("RamGb")
                                .HasColumnType("int");

                            b1.Property<int>("StorageGb")
                                .HasColumnType("int");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    RamGb = 12,
                                    StorageGb = 512
                                },
                                new
                                {
                                    Id = 2,
                                    RamGb = 8,
                                    StorageGb = 258
                                },
                                new
                                {
                                    Id = 3,
                                    RamGb = 8,
                                    StorageGb = 512
                                },
                                new
                                {
                                    Id = 4,
                                    RamGb = 8,
                                    StorageGb = 128
                                });
                        });

                    b.OwnsOne("Domain.Entities.ObjectValues.ProductObjectValue.FlagsObjectValue", "FlagsObjectValue", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<bool>("IsBestSeller")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsDailyOffer")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<bool>("IsFavorite")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("bit");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("Id");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.HasData(
                                new
                                {
                                    Id = 1,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = true
                                },
                                new
                                {
                                    Id = 2,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = true
                                },
                                new
                                {
                                    Id = 3,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = false
                                },
                                new
                                {
                                    Id = 4,
                                    IsBestSeller = false,
                                    IsDailyOffer = true,
                                    IsFavorite = true
                                });
                        });

                    b.Navigation("BatteryObjectValue");

                    b.Navigation("CameraObjectValue");

                    b.Navigation("DimensionObjectValue");

                    b.Navigation("DisplayObjectValue");

                    b.Navigation("FeatureObjectValue");

                    b.Navigation("FlagsObjectValue");

                    b.Navigation("PlatformObjectValue");

                    b.Navigation("StorageObjectValue");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
