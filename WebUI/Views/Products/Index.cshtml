@model ProductViewModel
<style>

    a:hover {
        color: #4CAF50;
    }

    ul li a {
        color: gray;
    }

    .style_li_button_typesOffers {
        font-weight: 500;
        font-size: 14px;
    }

    .pagination {
        text-align: center;
        margin-top: 20px;
    }

        .pagination a, .pagination span {
            display: inline-block;
            padding: 8px 16px;
            text-decoration: none;
            color: #ffffff;
            background-color: #4CAF50;
            border-radius: 4px;
            margin: 0 4px;
            cursor: pointer;
        }

            .pagination a:hover {
                background-color: #45a049;
            }

            .pagination span.current {
                background-color: #45a049;
                cursor: default;
            }

    .style_form_button {
        margin-top: 2px;
        background-color: lightgrey;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 24px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .style_form_button i {
            color: white;
        }
</style>

<nav class="navbar navbar-expand-lg">
    <div class="collapse navbar-collapse">
        <div class="navbar-nav">
            <div class="position-absolute top-0 end-0">
                @await Component.InvokeAsync("SortByMenu")
            </div>
        </div>
    </div>
</nav>
<nav>
    @if (Model?.CurrentCategory == null)
    {
        <h4 class="mb-3" style="color:gray">Products @Model?.CurrentBrand</h4>
    }
    else if (Model?.CurrentCategory != null)
    {
        <h4 class="mb-3" style="color:gray">Products in @Model.CurrentCategory</h4>
    }
</nav>

<div class="container">
    <div class="row">
        <div class="col-md-2">
            <h6>Types of offers</h6>
            <ul style="list-style:none; margin-left:-16%">
                <li>
                    <a class="style_li_button_typesOffers"
                       asp-controller="Products" asp-action="Index" asp-route-isDailyOffer="true">
                        Show Daily Offers
                    </a>
                </li>
                <li>
                    <a class="style_li_button_typesOffers"
                       asp-controller="Products" asp-action="Index" asp-route-isBestSeller="true">
                        Show Best Sellers
                    </a>
                </li>
            </ul>
            <h6>Search for products</h6>
            <form class="d-flex flex-grow-1 mb-3" style="width:200px;height:35px;">
                <input class="form-control me-2 bar" type="search" placeholder="Search in @Model?.CurrentCategory" aria-label="Search" name="keyword" value="@Context.Request.Query["keyword"].ToString()" />
            </form>
            <h6>Brands</h6>
            <div>
                @await Component.InvokeAsync("BrandsMenu")
            </div>
            <h6>Categories</h6>
            @await Component.InvokeAsync("CategoryWithProductCountList")
            <h6>Price</h6>
            <ul style="list-style:none;margin-left:-18%;font-weight:500">
                <li><a class="style_li_button_price" asp-controller="Products" asp-action="PriceIsLowerThanOneHundred">$ 100.00</a></li>
                <li><a class="style_li_button_price" asp-controller="Products" asp-action="PriceIsBetweenTwoHundredAndAThousand">$ 200.00 - $ 1000.00</a></li>
                <li><a class="style_li_button_price" asp-controller="Products" asp-action="PriceIsHigherThanTwoThousand">$ 2000.00</a></li>
            </ul>
            <form id="searchForm" class="d-flex flex-grow-1" method="get" action="/Products/Index" style="max-width: 250px;height:30px;margin-top:-5px">
                <input class="form-control me-2 bar" placeholder="min" aria-label="Search" name="minPrice" value="@Context.Request.Query["minPrice"].ToString()" />
                <span>_&nbsp;</span>
                <input class="form-control me-2 bar" placeholder="max" aria-label="Search" name="maxPrice" value="@Context.Request.Query["maxPrice"].ToString()" />
                <input type="hidden" name="brand" value="@Context.Request.Query["brand"].ToString()" />
                <!-- Hidden fields to keep paging filters -->
                <input type="hidden" name="page" value="@(ViewBag.CurrentPage)" />
                <input type="hidden" name="pageSize" value="@(ViewBag.PageSize)" />
                <button type="submit" class="style_form_button">
                    <i class="fa-solid fa-chevron-right"></i>
                </button>
            </form>
            <div class="mt-1">
                <a asp-controller="Products" asp-action="ClearFilter" style="color:grey;">Clear all</a>
            </div>
        </div>
        <div class="col-md-10">
            <div class="row">
                @foreach (var items in Model!.ProductsDto)
                {
                    <div class="col-lg-4">
                        <partial name="~/Views/Shared/ProductsPartial/GetProductsListPartial/GetProductsList.cshtml" for="@items" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="pagination" style="justify-content:center">
    @if (ViewBag.CurrentPage > 1)
    {
        <a href="/Products/Index?page=@(ViewBag.CurrentPage - 1)&minPrice=@Context.Request.Query["minPrice"].ToString()&maxPrice=@Context.Request.Query["maxPrice"].ToString()">Back</a>
    }

    @for (var i = 1; i <= ViewBag.TotalPages; i++)
    {
        if (i <= 11 || i == ViewBag.CurrentPage || i == ViewBag.TotalPages)
        {
            if (i == ViewBag.CurrentPage)
            {
                <span class="current">@i</span>
            }
            else
            {
                <a href="/Products/Index?page=@i&minPrice=@Context.Request.Query["minPrice"].ToString()&maxPrice=@Context.Request.Query["maxPrice"].ToString()">@i</a>
            }
        }
        else if (i == 12 && ViewBag.TotalPages > 12)
        {
            <span>...</span>
        }
    }

    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
    {
        <a href="/Products/Index?page=@(ViewBag.CurrentPage + 1)&minPrice=@Context.Request.Query["minPrice"].ToString()&maxPrice=@Context.Request.Query["maxPrice"].ToString()">Next</a>
    }
</div>


@section Scripts {
    <script>
        document.getElementById('searchForm').addEventListener('submit', function (event) {
            const minPriceInput = document.getElementsByName('minPrice')[0];
            const maxPriceInput = document.getElementsByName('maxPrice')[0];

            const minPrice = parseFloat(minPriceInput.value);
            const maxPrice = parseFloat(maxPriceInput.value);

            if (minPrice <= 0) {
                minPriceInput.classList.add('is-invalid');
                event.preventDefault(); 
                return;
            } else {
                minPriceInput.classList.remove('is-invalid');
                minPriceInput.nextElementSibling.textContent = '';
            }

            if (maxPrice <= 0) {
                maxPriceInput.classList.add('is-invalid');
                event.preventDefault(); 
            } else {
                maxPriceInput.classList.remove('is-invalid');
                maxPriceInput.nextElementSibling.textContent = '';
            }
        });

        document.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                var minPriceInput = document.getElementsByName('minPrice')[0];
                var maxPriceInput = document.getElementsByName('maxPrice')[0];

                var minPrice = parseFloat(minPriceInput.value);
                var maxPrice = parseFloat(maxPriceInput.value);

                if (minPrice <= 0) {
                    minPriceInput.classList.add('is-invalid');
                    minPriceInput.nextElementSibling.textContent = '';
                    e.preventDefault();
                    return;
                } else {
                    minPriceInput.classList.remove('is-invalid');
                    minPriceInput.nextElementSibling.textContent = '';
                }

                if (maxPrice <= 0) {
                    maxPriceInput.classList.add('is-invalid');
                    maxPriceInput.nextElementSibling.textContent = '';
                    e.preventDefault();
                    return;
                } else {
                    maxPriceInput.classList.remove('is-invalid');
                    maxPriceInput.nextElementSibling.textContent = '';
                }

                document.getElementById('searchForm').submit();
            }
        });

    </script>
}